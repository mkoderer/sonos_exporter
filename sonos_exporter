#!/usr/bin/env python3

import argparse
from collections import namedtuple
import http
import http.server
import prometheus_client
import re
import requests
import soco
import xml.etree.ElementTree as ElementTree
import logging

from prometheus_client.core import REGISTRY, GaugeMetricFamily


def main():
    logging.basicConfig(level=logging.INFO)
    parser = argparse.ArgumentParser(
        description="Prometheus exporter for Sonos networks")
    parser.add_argument("--address", default="localhost:1915",
                        help="Network address for this server")

    args = parser.parse_args()
    host, port = args.address.split(":", 1)

    REGISTRY.register(Collector())
    logging.info("Start server %s:%s" % (host, port))
    server = http.server.HTTPServer((host, int(port)), prometheus_client.MetricsHandler)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()


class Collector(object):

    def collect(self):
        speaker = GaugeMetricFamily("sonos_speaker", "Sonos speaker info",
            labels=[
                "display_version",
                "hardware_version",
                "mac_address",
                "model_name",
                "model_number",
                "player_icon",
                "serial_number",
                "software_version",
                "uid",
                "zone_name"
            ])

        rx_bytes = GaugeMetricFamily("sonos_rx_bytes", "Received bytes",
            labels=["player", "device"])
        tx_bytes = GaugeMetricFamily("sonos_tx_bytes", "Transmitted bytes",
            labels=["player", "device"])
        rx_packets = GaugeMetricFamily("sonos_rx_packets", "Received packets",
            labels=["player", "device"])
        tx_packets = GaugeMetricFamily("sonos_tx_packets", "Transmitted packets",
            labels=["player", "device"])
        zones = soco.discover()
        if zones is None:
            return
        for zone in zones:
            speaker_info = zone.get_speaker_info()
            speaker.add_metric([
                speaker_info.get("display_version", "null"),
                speaker_info.get("hardware_version", "null"),
                speaker_info.get("mac_address", "null"),
                speaker_info.get("model_name", "null"),
                speaker_info.get("model_number", "null"),
                speaker_info.get("player_icon", "null"),
                speaker_info.get("serial_number", "null"),
                speaker_info.get("software_version", "null"),
                speaker_info.get("uid", "null"),
                speaker_info.get("zone_name", "null"),
            ], value=1)

            interfaceUrl = "http://%s:1400/status/ifconfig" % zone.ip_address
            body = requests.get(interfaceUrl).text
            ifconfig = get_ifconfig(body)

            for iface in parse_ifconfig(ifconfig):
                device = iface.name

                rx_bytes.add_metric([zone.player_name, device], value=float(iface.rxbytes))
                tx_bytes.add_metric([zone.player_name, device], value=float(iface.txbytes))
                rx_packets.add_metric([zone.player_name, device], value=float(iface.rxpkts))
                tx_packets.add_metric([zone.player_name, device], value=float(iface.txpkts))

        yield speaker
        yield rx_bytes
        yield tx_bytes
        yield rx_packets
        yield tx_packets


def get_ifconfig(body):
    tree = ElementTree.fromstring(body)
    return tree.find("Command[@cmdline='/sbin/ifconfig']").text


def parse_ifconfig(text):
    ifaces = []

    blocks = text.strip().split("\n\n")
    for block in blocks:
        ifaces.append(parse_interface(block))

    return ifaces

Iface = namedtuple("Iface", "name rxbytes txbytes rxpkts txpkts")

def parse_interface(block):
    # This is not exactly general purpose, but I'm figuring the upstream
    # release cycle means the format won't change often.
    #
    # My devices are currently giving out blank line separated blocks
    # like this:
    #
    # br0       Link encap:Ethernet  HWaddr B8:E9:37:52:6F:58
    #           inet addr:192.168.78.5  Bcast:192.168.78.255  Mask:255.255.255.0
    #           UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
    #           RX packets:1024606 errors:0 dropped:0 overruns:0 frame:0
    #           TX packets:522396 errors:0 dropped:0 overruns:0 carrier:0
    #           collisions:0 txqueuelen:0
    #           RX bytes:574772233 (548.1 MiB)  TX bytes:230409343 (219.7 MiB)

    name = re.search(r"^([^ ]+)", block).group(1)
    rxbytes = txbytes = rxpkts = txpkts = None

    m = re.search(r"RX bytes:(\d+)", block, re.I)
    if m:
        rxbytes = int(m.group(1))

    m = re.search(r"TX bytes:(\d+)", block, re.I)
    if m:
        txbytes = int(m.group(1))

    m = re.search(r"RX packets:(\d+)", block, re.I)
    if m:
        rxpkts = int(m.group(1))

    m = re.search(r"TX packets:(\d+)", block, re.I)
    if m:
        txpkts = int(m.group(1))

    return Iface(name=name, rxbytes=rxbytes, txbytes=txbytes, rxpkts=rxpkts, txpkts=txpkts)


if __name__ == "__main__":
    main()
